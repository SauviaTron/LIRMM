%% LIRMM : Extract data from txt files generated by Node-RED
%  Autor : Andrea  Sauviat
%  Date  : 04.05.2022

clear all ; % Clear the Workspace
close all ; % Close of the figure
clc       ; % Clear the Command Window


%piroboh282@bodeem.com

%% Download Every .txt Files

% Get info about 'Files_txt' folder
Files_txt_Infos = dir( 'Files_txt_Releases' ) ;

% In every SubFolder ...
for Number_Of_SubFolder = 3:1:height(Files_txt_Infos)

    % ... Get the name of the SubFolder, 
    SubFolder_Name = Files_txt_Infos(Number_Of_SubFolder).name ;
    % ... and get info about the content of the SubFolder,
    Files_txt_Release_xx_DDMMYY = dir( strcat('Files_txt_Releases/',SubFolder_Name) ) ;

    % ... then get the content of the SubFolder ...
    for Number_Of_SubsubFolder = 3:1:height(Files_txt_Release_xx_DDMMYY)

        % ... Get the name the name of the file .txt
        SubsubFolder_Name = Files_txt_Release_xx_DDMMYY(Number_Of_SubsubFolder).name ;
        % ... Recover the file path
        File_Path = strcat('Files_txt_Releases/',SubFolder_Name,'/',SubsubFolder_Name);
        % ... Create a variable name for the downloaded data
        Data_Table_Name = strcat( SubFolder_Name , '_' , SubsubFolder_Name(1:7));
        % ... Asign the data with the variable name just created.
        Data = Convert_File_To_Data_Table( File_Path );
        eval( sprintf('%s = Data',Data_Table_Name) );

    end

end

clc ; % Clear the 'Command Window'

% Delete some values in order to keep the Workspace clean.
clear Files_txt_Infos Number_Of_SubFolder SubFolder_Name ...
      Files_txt_Release_xx_DDMMYY Number_Of_SubsubFolder ...
      SubsubFolder_Name File_Path Data_Table_Name Data

fprintf( " > You have downloaded the following files : \n")
Display_Downloaded_File() ;

fprintf( "\n" ) ;

return 


%% 20/06/2023

close all

figure( 1 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_04b_200623_GNAT_04 , Release_04b_200623_GNAT_06 )
title( "20/06/23 - Float #04 (red-jellyfish) and #06 (blue-dummy) ")
figure( 2 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_04b_200623_GNAT_08 , Release_04b_200623_GNAT_03 )
title( "20/06/23 - Float #08 (red-jellyfish) and #03 (blue-dummy) ")
figure( 3 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_04b_200623_GNAT_05 , Release_04b_200623_GNAT_07 )
title( "20/06/23 - Float #05 (red-jellyfish) and #07 (blue-dummy) ")
figure(4)
Display_Trajectory_24h( Release_04b_200623_GNAT_09 )


%% 21/06/23

close all

figure( 1 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_05 , Release_05b_210623_GNAT_08 )
title( "21/06/23 - Float #05 (red-jellyfish) and #08 (blue-dummy) ")
figure( 2 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_07 , Release_05b_210623_GNAT_08 )
title( "21/06/23 - Float #07 (red-jellyfish) and #08 (blue-dummy) ")
figure( 3 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_01 , Release_04b_200623_GNAT_04 )
title( "21/06/23 - Float #01 (red-jellyfish) and #04 (blue-dummy) ")
figure( 4 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_03 , Release_05b_210623_GNAT_04 )
title( "21/06/23 - Float #03 (red-jellyfish) and #04 (blue-dummy) ")
figure( 5 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_06 , Release_05b_210623_GNAT_04 )
title( "21/06/23 - Float #06 (red-jellyfish) and #04 (blue-dummy) ")
figure( 6 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_35 , Release_05b_210623_GNAT_38 )
title( "21/06/23 - Float #05 (red-jellyfish) and #08 (blue-dummy) ")
figure( 7 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_36 , Release_05b_210623_GNAT_38 )
title( "21/06/23 - Float #06 (red-jellyfish) and #08 (blue-dummy) ")
figure( 8 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_31 , Release_05b_210623_GNAT_34 )
title( "21/06/23 - Float #01 (red-jellyfish) and #04 (blue-dummy) ")
figure( 9 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_37 , Release_05b_210623_GNAT_33 )
title( "21/06/23 - Float #07 (red-jellyfish) and #03 (blue-dummy) ")
figure( 10 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_65 , Release_05b_210623_GNAT_64 )
title( "21/06/23 - Float #05 (red-jellyfish) and #04 (blue-dummy) ")
figure( 11 )
Display_Trajectory_24h_Jellyfish_And_Dummy( Release_05b_210623_GNAT_67 , Release_05b_210623_GNAT_68 )
title( "21/06/23 - Float #07 (red-jellyfish) and #08 (blue-dummy) ")
figure( 12 )
Display_Trajectory_24h_Jellyfish( Release_05b_210623_GNAT_91 )
title( "21/06/23 - Float #01 (red-jellyfish)")
figure( 13 )
Display_Trajectory_24h_Jellyfish( Release_05b_210623_GNAT_96 )
title( "21/06/23 - Float #06 (red-jellyfish)")
figure( 14 )
Display_Trajectory_24h_Jellyfish( Release_05b_210623_GNAT_09 )
title( "21/06/23 - Float #09 (red-jellyfish)")


%% 
clc
close all

Release_05b_210623_GNAT_96_Filtered = Filtre_fcnt_vitesse3( Release_05b_210623_GNAT_96 ) ;

% fprintf("Max GPS_Vitesse : %.2f \n", max( Release_05b_210623_GNAT_96_Filtered.GPS_Vitesse ) );

%%
Release_05b_210623_GNAT_91_Filtered = Filtre_fcnt_vitesse3( Release_05b_210623_GNAT_91 ) ;

%% 06/07/2023

clc
clear all
close all


% --- Float #03 --- %

Gnat_Number = "03" ;

Release_Lat = 43.10041 ; Release_Lon =  3.02181 ;  
Rescue_Lat = 43.103801 ; Rescue_Lon =  3.01773 ; 
Display_ReleaseNRescue_Point = true ;
GPS_Release_N_Rescue_03 = [ Release_Lat Release_Lon ; Rescue_Lat Rescue_Lon ; Display_ReleaseNRescue_Point 0 ] ;

Color = "white" ;

File = "GNAT_" + Gnat_Number + ".txt" ;
File_Flash = "GNAT_" + Gnat_Number +"_Flash.txt" ;

Release_03 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File ) ;
Release_Flash_03 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File_Flash ) ;

figure(1)
    subplot( 221 )
    Display_Trajectory( Release_03, GPS_Release_N_Rescue_03, Color ) ;
    title( "1. Raw Data" ) ;
    subplot( 222 )
    Display_Trajectory( Release_Flash_03, GPS_Release_N_Rescue_03 , Color ) ;
    title( "2. Flash Data" ) ;
    subplot( 223 )
    Release_Flash_filtred_03 = Filtre_fcnt_vitesse_( Release_Flash_03 ) ;
    Display_Trajectory( Release_Flash_filtred_03, GPS_Release_N_Rescue_03, Color )
    title( "3. Flash Data filtred");
    subplot( 224 )
    Display_Trajectory_Tendency( Release_Flash_filtred_03, GPS_Release_N_Rescue_03 , 0.25, 170, Color )
    title( "4. Tendancy curve");
    sgtitle( "From 06/07/2023 10h44 to 06/07/2023 11h46 - " + "GNAT #" + Gnat_Number + " - Jellyfish TL = 26cm")


% --- Float #04 --- %

Gnat_Number = "04" ;

Release_Lat = 43.10109 ; Release_Lon =  3.02151 ;
Rescue_Lat = 43.10373 ; Rescue_Lon = 3.02093 ;
Display_ReleaseNRescue_Point = true ;
GPS_Release_N_Rescue_04 = [ Release_Lat Release_Lon ; Rescue_Lat Rescue_Lon ; Display_ReleaseNRescue_Point 0 ] ;

Color = "white" ;

File = "GNAT_" + Gnat_Number + ".txt" ;
% File_Flash = "GNAT_" + Gnat_Number +"_Flash.txt" ;

Release_04 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File ) ;
% Release_Flash_04 = Convert_File_To_Data_Table("Files_txt_Releases\Release_06_060723\" + File_Flash ) ; % No flash

figure(2)
    subplot( 221 )
    Display_Trajectory( Release_04, GPS_Release_N_Rescue_04, Color ) ;
    title( "1. Raw Data" ) ;
    subplot( 222 )
    %Display_Trajectory( Release_Flash_04 ) ;
    title( "2. Flash Data" ) ;
    subplot( 223 )
    Release_filtred_04 = Filtre_fcnt_vitesse_( Release_04 ) ;
    Display_Trajectory( Release_filtred_04, GPS_Release_N_Rescue_04, Color )
    title( "3. Raw Data filtred");
    subplot( 224 )
    Display_Trajectory_Tendency( Release_filtred_04, GPS_Release_N_Rescue_04 , 0.25, 110, Color )
    title( "4. Tendancy curve");
    sgtitle( "From 06/07/2023 10h47 to 06/07/2023 11h46 - " + "GNAT #" + Gnat_Number + " - Jellyfish TL = 30cm")


% --- Float #05 --- %

Gnat_Number = "05" ;
Release_Lat = 43.10218 ; Release_Lon =  3.02105 ;
Rescue_Lat = 43.10302 ; Rescue_Lon = 3.02078 ;
Display_ReleaseNRescue_Point = true ;
GPS_Release_N_Rescue_05 = [ Release_Lat Release_Lon ; Rescue_Lat Rescue_Lon ; Display_ReleaseNRescue_Point 0 ] ;

Color = "white" ;

File = "GNAT_" + Gnat_Number + ".txt" ;
% File_Flash = "GNAT_" + Gnat_Number +"_Flash.txt" ;

Release_05 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File ) ;
% Release_Flash_04 = Convert_File_To_Data_Table("Files_txt_Releases\Release_06_060723\" + File_Flash ) ; % No flash

figure(3)
    subplot( 221 )
    Display_Trajectory( Release_05, GPS_Release_N_Rescue_05, Color ) ;
    title( "1. Raw Data" ) ;
    subplot( 222 )
    %Display_Trajectory( Release_Flash_04 ) ;
    title( "2. Flash Data" ) ;
    subplot( 223 )
    Release_filtred_05 = Filtre_fcnt_vitesse_( Release_05 ) ;
    Display_Trajectory( Release_filtred_05, GPS_Release_N_Rescue_05, Color )
    title( "3. Raw Data filtred");
    subplot( 224 )
    Display_Trajectory_Tendency( Release_filtred_05, GPS_Release_N_Rescue_05 , 0.25, 65, Color )
    title( "4. Tendancy curve");
    sgtitle( "From 06/07/2023 10h54 to 06/07/2023 11h46 - " + "GNAT #" + Gnat_Number + " - Jellyfish TL = 23cm")


% --- Float #07 --- %

Gnat_Number = "07" ;

Release_Lat = 43.10238 ; Release_Lon =  3.02097 ;
Rescue_Lat = 43.10662 ; Rescue_Lon = 3.01718 ;
Display_ReleaseNRescue_Point = true ;
GPS_Release_N_Rescue_07 = [ Release_Lat Release_Lon ; Rescue_Lat Rescue_Lon ; Display_ReleaseNRescue_Point 0 ] ;

Color = "white" ;

File = "GNAT_" + Gnat_Number + ".txt" ;
% File_Flash = "GNAT_" + Gnat_Number +"_Flash.txt" ;

Release_07 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File ) ;
% Release_Flash_04 = Convert_File_To_Data_Table("Files_txt_Releases\Release_06_060723\" + File_Flash ) ; % No flash

figure(4)
    subplot( 221 )
    Display_Trajectory( Release_07, GPS_Release_N_Rescue_07, Color ) ;
    title( "1. Raw Data" ) ;
    subplot( 222 )
    %Display_Trajectory( Release_Flash_04 ) ;
    title( "2. Flash Data" ) ;
    subplot( 223 )
    Release_filtred_07 = Filtre_fcnt_vitesse_( Release_07 ) ;
    Display_Trajectory( Release_filtred_07, GPS_Release_N_Rescue_07, Color )
    title( "3. Raw Data filtred");
    subplot( 224 )
    Display_Trajectory_Tendency( Release_filtred_07, GPS_Release_N_Rescue_07 , 0.25, 130, Color )
    title( "4. Tendancy curve");
    sgtitle( "From 06/07/2023 10h57 to 06/07/2023 11h46 - " + "GNAT #" + Gnat_Number + " - Jellyfish TL = 25cm")


% --- Float #08 --- %

Gnat_Number = "08" ;

Release_Lat = 43.09977 ; Release_Lon =  3.02222 ;
Rescue_Lat = 43.10431 ; Rescue_Lon = 3.01852 ;
Display_ReleaseNRescue_Point = true ;
GPS_Release_N_Rescue_08 = [ Release_Lat Release_Lon ; Rescue_Lat Rescue_Lon ; Display_ReleaseNRescue_Point 0 ] ;

Color = "white" ;

File = "GNAT_" + Gnat_Number + ".txt" ;
File_Flash = "GNAT_" + Gnat_Number +"_Flash.txt" ;

Release_08 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File ) ;
Release_Flash_08 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File_Flash ) ;

figure(5)
    subplot( 221 )
    Display_Trajectory( Release_08, GPS_Release_N_Rescue_08, Color ) ;
    title( "1. Raw Data" ) ;
    subplot( 222 )
    Display_Trajectory( Release_Flash_08, GPS_Release_N_Rescue_08, Color ) ;
    title( "2. Flash Data" ) ;
    subplot( 223 )
    Release_Flash_filtred_08 = Filtre_fcnt_vitesse_( Release_Flash_08 ) ;
    Display_Trajectory( Release_Flash_filtred_08, GPS_Release_N_Rescue_08, Color )
    title( "3. Flash Data filtred");
    subplot( 224 )
    Display_Trajectory_Tendency( Release_Flash_filtred_08, GPS_Release_N_Rescue_08 , 0.25, 125, Color )
    title( "4. Tendancy curve");
    sgtitle( "From 06/07/2023 10h41 to 06/07/2023 11h46 - " + "GNAT #" + Gnat_Number + " - Control float")


% --- Float #10 --- %

Gnat_Number = "10" ;

Release_Lat = 43.09977 ; Release_Lon =  3.02222 ;
Rescue_Lat = 43.10389 ; Rescue_Lon = 3.02269 ;
Display_ReleaseNRescue_Point = true ;
GPS_Release_N_Rescue_10 = [ Release_Lat Release_Lon ; Rescue_Lat Rescue_Lon ; Display_ReleaseNRescue_Point 0 ] ;

Color = "white" ;

File = "GNAT_" + Gnat_Number + ".txt" ;
File_Flash = "GNAT_" + Gnat_Number +"_Flash.txt" ;

Release_10 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File ) ;
Release_Flash_10 = Convert_File_To_Data_Table( "Files_txt_Releases\Release_06_060723\" + File_Flash ) ;

figure(6)
    subplot( 221 )
    Display_Trajectory( Release_10 , GPS_Release_N_Rescue_10, Color ) ;
    title( "1. Raw Data" ) ;
    subplot( 222 )
    Display_Trajectory( Release_Flash_10 , GPS_Release_N_Rescue_10, Color ) ;
    title( "2. Flash Data" ) ;
    subplot( 223 )
    Release_Flash_filtred_10 = Filtre_fcnt_vitesse_( Release_Flash_10 ) ;
    Display_Trajectory( Release_Flash_filtred_10 , GPS_Release_N_Rescue_10, Color )
    title( "3. Flash Data filtred");
    subplot( 224 )
    Display_Trajectory_Tendency( Release_Flash_filtred_10 , GPS_Release_N_Rescue_10 , 0.25, 125, Color )
    title( "4. Tendancy curve");
    sgtitle( "From 06/07/2023 10h40 to 06/07/2023 11h46 - " + "GNAT #" + Gnat_Number + " - Jellyfish TL = 25cm")


% --- All float --- %

figure( 7 )
    Display_Trajectory_Tendency( Release_Flash_filtred_03, GPS_Release_N_Rescue_03 , 0.25, 170, 'red' )
    hold on
    Display_Trajectory_Tendency( Release_filtred_04, GPS_Release_N_Rescue_04 , 0.25, 110, 'red' )
    hold on
    Display_Trajectory_Tendency( Release_filtred_05, GPS_Release_N_Rescue_05 , 0.25, 65, 'red' )
    hold on
    Display_Trajectory_Tendency( Release_filtred_07, GPS_Release_N_Rescue_07 , 0.25, 130, 'red' )
    hold on
    Display_Trajectory_Tendency( Release_Flash_filtred_08, GPS_Release_N_Rescue_08 , 0.25, 125, 'white' )
    hold on
    Display_Trajectory_Tendency( Release_Flash_filtred_10, GPS_Release_N_Rescue_10 , 0.25, 125, 'red' )



%% Release n°07 - 10/07/2023

close all
clear all
clc

Release = "Release_07_100723" ;

% --- Individual analysis --- %
[Release_Flash_filtred_02 , Information_02] = Display_float( 'Release_07_100723', "02", true , 34, "09h50", 43.13981, 3.01195, "10h45", 43.139890, 3.011800, true, 0.25, 125) ;
[Release_Flash_filtred_03 , Information_03] = Display_float( 'Release_07_100723', "03", false,  0, "09h33", 43.13881, 3.01407, "10h54", 43.136906, 3.015950, true, 0.25, -75) ;
[Release_Flash_filtred_04 , Information_04] = Display_float( 'Release_07_100723', "04", true , 24, "09h32", 43.13881, 3.01407, "10h21", 43.138490, 3.013540, true, 0.25, 190) ;
[Release_Flash_filtred_05 , Information_05] = Display_float( 'Release_07_100723', "05", true , 21, "09h36", 43.13866, 3.01338, "10h22", 43.138470, 3.013510, true, 0.25, -80) ;
[Release_Flash_filtred_08 , Information_08] = Display_float( 'Release_07_100723', "08", true , 30, "09h47", 43.13794, 3.01211, "10h56", 43.137480, 3.013480, true, 0.25,  25) ;
[Release_Flash_filtred_10 , Information_10] = Display_float( 'Release_07_100723', "10", true , 29, "09h39", 43.13907, 3.01300, "10h41", 43.138780, 3.013040, true, 0.25, -80) ;


% --- All float --- %
figure()
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_02, Information_02 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_03, Information_03 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_04, Information_04 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_05, Information_05 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_08, Information_08 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_10, Information_10 )
    title("Roll-out summary n°07 - 10/07/2023")

    annotation('textbox',...
    [0.21 0.13 0.14 0.075],...
    'String',{  'Wind direction          124°',...
                'Waves direction       142°',...
                'Current direction      090°'},'FitBoxToText','off');

    [positionDepart, positionArrivee] = calculerPositionsFleche( [0.340 , 0.185], convertirAngle(124), 1e-3) ;
    annotation('arrow',[positionDepart(1,1) positionArrivee(1,1)],[positionDepart(1,2) positionArrivee(1,2)]);
    [positionDepart, positionArrivee] = calculerPositionsFleche( [0.340, 0.162], convertirAngle(142), 1e-3) ;
    annotation('arrow',[positionDepart(1,1) positionArrivee(1,1)],[positionDepart(1,2) positionArrivee(1,2)]);
    [positionDepart, positionArrivee] = calculerPositionsFleche( [0.340 , 0.145], convertirAngle(90), 1e-3) ;
    annotation('arrow',[positionDepart(1,1) positionArrivee(1,1)],[positionDepart(1,2) positionArrivee(1,2)]);


%% Release n°08 - 11/07/2023

close all
clear all
clc

Release = 'Release_08_110723' ;

% --- Individual analysis --- %
[Release_Flash_filtred_02 , Information_02] = Display_float( Release, "02", true , 26, "09h04", 43.10026, 3.02278, "10h35", 43.100300, 3.02263, true, 0.25, 200) ;
[Release_Flash_filtred_03 , Information_03] = Display_float( Release, "03", true , 31, "09h00", 43.10002, 3.02307, "10h48", 43.100380, 3.023520, true, 0.25, 115) ;
[Release_Flash_filtred_04 , Information_04] = Display_float( Release, "04", false,  0, "08h55", 43.09944, 3.02370, "10h30", 43.101100, 3.019720, true, 0.25, 180) ;
[Release_Flash_filtred_05 , Information_05] = Display_float( Release, "05", true , 30, "08h59", 43.09980, 3.02369, "10h43", 43.100080, 3.022760, true, 0.25, 170) ;
[Release_Flash_filtred_07 , Information_07] = Display_float( Release, "07", true , 28, "09h12", 43.10026, 3.02260, "10h37", 43.100410, 3.022770, true, 0.25, -75) ;
[Release_Flash_filtred_08 , Information_08] = Display_float( Release, "08", true , 25, "08h54", 43.09943, 3.02372, "10h44", 43.100810, 3.024720, true, 0.25, 10) ;
[Release_Flash_filtred_10 , Information_10] = Display_float( Release, "10", true , 28, "08h45", 43.09949, 3.023728, "10h34", 43.10027, 3.02280, true, 0.25, 125) ;


% --- All float --- %
figure()
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_02, Information_02 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_03, Information_03 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_04, Information_04 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_05, Information_05 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_07, Information_07 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_08, Information_08 )
    hold on
    Display_Trajectory_Tendency_v2( Release_Flash_filtred_10, Information_10 )
    title("Roll-out summary n°08 - 11/07/2023")

    annotation('textbox',...
    [0.21 0.13 0.14 0.075],...
    'String',{  'Wind direction          115°',...
                'Waves direction       150°',...
                'Current direction      114°'},'FitBoxToText','off');

    [positionDepart, positionArrivee] = calculerPositionsFleche( [0.340 , 0.185], convertirAngle(115), 1e-3) ;
    annotation('arrow',[positionDepart(1,1) positionArrivee(1,1)],[positionDepart(1,2) positionArrivee(1,2)]);
    [positionDepart, positionArrivee] = calculerPositionsFleche( [0.340, 0.162], convertirAngle(150), 1e-3) ;
    annotation('arrow',[positionDepart(1,1) positionArrivee(1,1)],[positionDepart(1,2) positionArrivee(1,2)]);
    [positionDepart, positionArrivee] = calculerPositionsFleche( [0.340 , 0.145], convertirAngle(114), 1e-3) ;
    annotation('arrow',[positionDepart(1,1) positionArrivee(1,1)],[positionDepart(1,2) positionArrivee(1,2)]);


%%

clc
close all

Kalman_Q = [0.01 0 0 0;
             0 0.01 0 0;
             0 0 0.1 0;
             0 0 0 0.1];  % Matrice de covariance du bruit du modèle (process noise)
for i = 0.1:0.1:1
Kalman_R = eye(2) * i * 10;  % Matrice de covariance du bruit de mesure (measurement noise)
[Release_Flash_filtred_04 , Information_04] = Display_float_Kalman( Kalman_Q, Kalman_R, Release, "04", false,  0, "08h55", 43.09944, 3.02370, "10h30", 43.101100, 3.019720, true, 0.25, 180) ;
end


%%
for Nb_Echantillon = 1:1:25 
[Release_Flash_filtred_04 , Information_04] = Display_float_Moyenne( Nb_Echantillon, Release, "04", false,  0, "08h55", 43.09944, 3.02370, "10h30", 43.101100, 3.019720, true, 0.25, 180) ;
end



%%

for Nb_Echantillon = 1:1:25 
[Release_Flash_filtred_04 , Information_04] = Display_float_Mediane( Nb_Echantillon, Release, "04", false,  0, "08h55", 43.09944, 3.02370, "10h30", 43.101100, 3.019720, true, 0.25, 180) ;
end




%% Exemple d'utilisation
positionDepart = [0.360, 0.167];  % Position de départ de la flèche
angle = 45;  % Angle de la flèche (en degrés)
longueur = 1e-3;  % Longueur de la flèche

% Calculer les positions de départ et d'arrivée de la flèche
[positionDepart, positionArrivee] = calculerPositionsFleche(positionDepart, angle, longueur);

% Afficher les positions de départ et d'arrivée
disp('Position de départ de la flèche :');
disp(positionDepart);
disp('Position d''arrivée de la flèche :');
disp(positionArrivee);
%%
% Convertir un angle de la rosace A en un angle dans la rosace B
angleA = 350;  % Angle dans la rosace A
angleB = convertirAngle(angleA);

% Afficher le résultat
disp(['Angle dans la rosace A : ', num2str(angleA), ' degrés']);
disp(['Angle dans la rosace B : ', num2str(angleB), ' degrés']);

%%

clc
close all

% Données de mesure de position GPS (latitude et longitude)
latitude = Release_Flash_filtred_04.GPS_Latitude;  
longitude = Release_Flash_filtred_04.GPS_Longitude; 

% Paramètres de la fonction rmoutliers
threshold = 2; % Seuil pour définir les valeurs aberrantes

% Détection des valeurs aberrantes pour la latitude
[latitude_clean, outliers_lat] = rmoutliers(latitude, 'ThresholdFactor', threshold);

% Détection des valeurs aberrantes pour la longitude
[longitude_clean, outliers_lon] = rmoutliers(longitude, 'ThresholdFactor', threshold);

% Affichage des résultats
figure;
subplot(2, 1, 1);
plot(latitude, 'r.', 'MarkerSize', 10);
hold on;
plot(find(outliers_lat), latitude(outliers_lat), 'bo', 'MarkerSize', 8);
xlabel('Indice de mesure');
ylabel('Latitude');
legend('Données brutes', 'Valeurs aberrantes');
title('Détection des valeurs aberrantes pour la latitude');

subplot(2, 1, 2);
plot(longitude, 'r.', 'MarkerSize', 10);
hold on;
plot(find(outliers_lon), longitude(outliers_lon), 'bo', 'MarkerSize', 8);
xlabel('Indice de mesure');
ylabel('Longitude');
legend('Données brutes', 'Valeurs aberrantes');
title('Détection des valeurs aberrantes pour la longitude');


%%
function angleB = convertirAngle(angleA)
    % Vérifier si l'angle est en dehors de la plage [0, 360]
    if angleA < 0 || angleA > 360
        error('L''angle doit être compris entre 0 et 360 degrés.');
    end
    
    % Calculer l'angle correspondant dans la rosace B
    if angleA == 0
        angleB = 90;
    elseif angleA == 90
        angleB = 0;
    elseif angleA == 180
        angleB = 270;
    elseif angleA == 270
        angleB = 180;
    else
        % Si l'angle n'est pas l'un des cas spéciaux, ajustez-le en utilisant des opérations modulo pour obtenir l'équivalent dans la plage [0, 360]
        angleA = mod(angleA, 360);
        
        % Calculer l'angle correspondant dans la rosace B en ajustant les valeurs de manière appropriée
        if angleA > 0 && angleA < 90
            angleB = 90 - angleA;
        elseif angleA > 90 && angleA < 180
            angleB = 360 - (angleA - 90);
        elseif angleA > 180 && angleA < 270
            angleB = 270 - (angleA - 180);
        elseif angleA > 270 && angleA < 360
            angleB = 180 - (angleA - 270);
        end
    end
end

function [startPoint, endPoint] = calculerPositionsFleche(position, angle, longueur)
    % Convertir l'angle en radians
    angleRad = deg2rad(angle);
    
    % Calculer les coordonnées x et y de la position de départ
    startX = position(1);
    startY = position(2);
    
    % Calculer les coordonnées x et y de la position d'arrivée
    endX = startX + longueur * cos(angleRad);
    endY = startY + longueur * sin(angleRad);
    
    % Retourner les positions de départ et d'arrivée
    startPoint = [startX, startY];
    endPoint = [endX, endY];
end

%%

function compareMethodsGPS(data)
    % Données de mesure de position GPS (latitude et longitude)
    latitude = data.GPS_Latitude;
    longitude = data.GPS_Longitude;

    % Méthode 1: Lissage par spline
    spline_lat = splineSmooth(latitude);
    spline_lon = splineSmooth(longitude);

    % Méthode 2: Régression polynomiale
    poly_lat = polySmooth(latitude);
    poly_lon = polySmooth(longitude);

    % Méthode 4: Interpolation linéaire
    interp_lat = linearInterpolation(latitude);
    interp_lon = linearInterpolation(longitude);

    % Affichage des résultats
    figure;
    subplot(2, 2, 1);
    plot(latitude, longitude, 'r.', 'MarkerSize', 10);
    hold on;
    plot(spline_lat, spline_lon, 'b-', 'LineWidth', 1.5);
    xlabel('Latitude');
    ylabel('Longitude');
    legend('Mesures GPS', 'Lissage par spline');
    title('Lissage par spline');

    subplot(2, 2, 2);
    plot(latitude, longitude, 'r.', 'MarkerSize', 10);
    hold on;
    plot(poly_lat, poly_lon, 'b-', 'LineWidth', 1.5);
    xlabel('Latitude');
    ylabel('Longitude');
    legend('Mesures GPS', 'Régression polynomiale');
    title('Régression polynomiale');


    subplot(2, 2, 4);
    plot(latitude, longitude, 'r.', 'MarkerSize', 10);
    hold on;
    plot(interp_lat, interp_lon, 'b-', 'LineWidth', 1.5);
    xlabel('Latitude');
    ylabel('Longitude');
    legend('Mesures GPS', 'Interpolation linéaire');
    title('Interpolation linéaire');
end

% Fonction de lissage par spline
function smoothed_data = splineSmooth(data)
    smoothed_data = smooth(data, 'rloess');
end

% Fonction de régression polynomiale
function smoothed_data = polySmooth(data)
    p = polyfit(1:length(data), data, 3);
    smoothed_data = polyval(p, 1:length(data));
end



% Fonction d'interpolation linéaire
function interpolated_data = linearInterpolation(data)
    interpolated_data = interp1(1:length(data), data, linspace(1, length(data), length(data)*2), 'linear');
end



%%

function [Release_Flash_filtred_xx , Information] = Display_float_Kalman2( Kalman_Q, Kalman_R, Release , GNAT_Number, IsAJellyfish, Jellyfish_Length, ...
                                                                          Hour_Release, Release_Lat, Release_Lon, ...
                                                                          Hour_Rescue, Rescue_Lat, Rescue_Lon, ...
                                                                          Display_ReleaseNRescue_Point, ...
                                                                          Tendency_Coeff, Tendency_SymbolAngle )

% Extract release info
Release_Number = Release(9:10);
Release_Date   = append( Release(12:13), '/', Release(14:15), "/", Release(16:17));


% Download the LoRa file and the flash file

File = "GNAT_" + GNAT_Number + ".txt" ;
File_Flash = "GNAT_" + GNAT_Number +"_Flash.txt" ;

[Release_xx, Data_LoRa_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File ) ;
[Release_Flash_xx, Data_Flash_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File_Flash ) ;


% Get some info

Information = [ Release_Lat                     Release_Lon             ; 
                Rescue_Lat                      Rescue_Lon              ; 
                Display_ReleaseNRescue_Point    0                       ;
                IsAJellyfish                    Jellyfish_Length        ;
                Tendency_Coeff                  Tendency_SymbolAngle    ] ;

if( IsAJellyfish == true )
    ColorPlot = "red" ;
else
    ColorPlot = "white" ;
end

Release_Flash_filtred_xx = 0 ;


% Kalman

% Données de mesure de position GPS (latitude et longitude)
latitude = Release_Flash_xx.GPS_Latitude;  
longitude = Release_Flash_xx.GPS_Longitude; 

% Paramètres du filtre de Kalman étendu (EKF)
dt = 1;  % Intervalle de temps entre les mesures
Q = eye(4);  % Matrice de covariance du bruit du modèle (process noise)
R = eye(2);  % Matrice de covariance du bruit de mesure (measurement noise)

% Initialisation des variables d'état et de covariance
x = [latitude(1); longitude(1); 0; 0];  % État initial [latitude; longitude; vitesse_latitude; vitesse_longitude]
P = eye(4);  % Matrice de covariance de l'état initial

% Estimation de position avec le filtre de Kalman étendu (EKF)
estimations = zeros(2, length(latitude));
for i = 1:length(latitude)
    % Prédiction de l'état
    [x_pred, F] = prediction_step(x, dt);
    
    % Prédiction de la covariance de l'état
    P_pred = F * P * F' + Q;
    
    % Mise à jour des mesures
    z = [latitude(i); longitude(i)];
    
    % Calcul de l'innovation
    [y, H] = innovation_step(x_pred, z);
    
    % Calcul de la matrice de covariance de l'innovation
    S = H * P_pred * H' + R;
    
    % Calcul du gain de Kalman
    K = P_pred * H' / S;
    
    % Mise à jour de l'état estimé
    x = x_pred + K * y;
    
    % Mise à jour de la covariance de l'état estimé
    P = (eye(4) - K * H) * P_pred;
    
    % Stockage de l'estimation de la position
    estimations(:, i) = x(1:2);
end

figure;

subplot( 2,2,1:2 )
plot( estimatedPositions(2, :),estimatedPositions(1, :), 'b-', 'LineWidth', 1.5);
hold on;
plot(longitude, latitude, 'r.', 'MarkerSize', 10);
xlabel('Latitude');
ylabel('Longitude');
legend('Estimation', 'Mesures GPS');
title('Estimation du déplacement avec le filtre de Kalman');

    subplot( 223 )
    plot( Release_Flash_xx.GPS_Latitude , 'o' )
    hold on
    plot(estimatedPositions(1, :))
    subplot( 224 )
    plot( Release_Flash_xx.GPS_Longitude ,'o')
    hold on
    plot(estimatedPositions(2, :))

end


function [Release_Flash_filtred_xx , Information] = Display_float_Mediane( Nb_Echantillon, Release , GNAT_Number, IsAJellyfish, Jellyfish_Length, ...
                                                                          Hour_Release, Release_Lat, Release_Lon, ...
                                                                          Hour_Rescue, Rescue_Lat, Rescue_Lon, ...
                                                                          Display_ReleaseNRescue_Point, ...
                                                                          Tendency_Coeff, Tendency_SymbolAngle )

% Extract release info
Release_Number = Release(9:10);
Release_Date   = append( Release(12:13), '/', Release(14:15), "/", Release(16:17));


% Download the LoRa file and the flash file

File = "GNAT_" + GNAT_Number + ".txt" ;
File_Flash = "GNAT_" + GNAT_Number +"_Flash.txt" ;

[Release_xx, Data_LoRa_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File ) ;
[Release_Flash_xx, Data_Flash_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File_Flash ) ;


% Get some info

Information = [ Release_Lat                     Release_Lon             ; 
                Rescue_Lat                      Rescue_Lon              ; 
                Display_ReleaseNRescue_Point    0                       ;
                IsAJellyfish                    Jellyfish_Length        ;
                Tendency_Coeff                  Tendency_SymbolAngle    ] ;

if( IsAJellyfish == true )
    ColorPlot = "red" ;
else
    ColorPlot = "white" ;
end

Release_Flash_filtred_xx = 0 ;


% Données de mesure de position GPS (latitude et longitude)
latitude = Release_Flash_xx.GPS_Latitude;  
longitude = Release_Flash_xx.GPS_Longitude; 

% Fenêtre de moyenne mobile (nombre de mesures précédentes à prendre en compte)
fenetre = Nb_Echantillon;

% Estimation de position lissée avec le filtre de mediane
latitude_filtree = medfilt1(latitude, fenetre);
longitude_filtree = medfilt1(longitude, fenetre);



figure;

subplot( 2,2,1:2 )
plot( longitude_filtree,latitude_filtree, 'b-', 'LineWidth', 1.5);
hold on;
plot(longitude, latitude, 'r.', 'MarkerSize', 10);
xlabel('Latitude');
ylabel('Longitude');
legend('Estimation', 'Mesures GPS');
title('Estimation de la position avec un filtre de moyenne mobile');

    subplot( 223 )
    plot( Release_Flash_xx.GPS_Latitude , 'o' )
    hold on
    plot(latitude_filtree)
    subplot( 224 )
    plot( Release_Flash_xx.GPS_Longitude ,'o')
    hold on
    plot(longitude_filtree)

end



function [Release_Flash_filtred_xx , Information] = Display_float_Moyenne( Nb_Echantillon, Release , GNAT_Number, IsAJellyfish, Jellyfish_Length, ...
                                                                          Hour_Release, Release_Lat, Release_Lon, ...
                                                                          Hour_Rescue, Rescue_Lat, Rescue_Lon, ...
                                                                          Display_ReleaseNRescue_Point, ...
                                                                          Tendency_Coeff, Tendency_SymbolAngle )

% Extract release info
Release_Number = Release(9:10);
Release_Date   = append( Release(12:13), '/', Release(14:15), "/", Release(16:17));


% Download the LoRa file and the flash file

File = "GNAT_" + GNAT_Number + ".txt" ;
File_Flash = "GNAT_" + GNAT_Number +"_Flash.txt" ;

[Release_xx, Data_LoRa_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File ) ;
[Release_Flash_xx, Data_Flash_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File_Flash ) ;


% Get some info

Information = [ Release_Lat                     Release_Lon             ; 
                Rescue_Lat                      Rescue_Lon              ; 
                Display_ReleaseNRescue_Point    0                       ;
                IsAJellyfish                    Jellyfish_Length        ;
                Tendency_Coeff                  Tendency_SymbolAngle    ] ;

if( IsAJellyfish == true )
    ColorPlot = "red" ;
else
    ColorPlot = "white" ;
end

Release_Flash_filtred_xx = 0 ;


% Données de mesure de position GPS (latitude et longitude)
latitude = Release_Flash_xx.GPS_Latitude;  
longitude = Release_Flash_xx.GPS_Longitude; 

% Fenêtre de moyenne mobile (nombre de mesures précédentes à prendre en compte)
fenetre = Nb_Echantillon;

% Estimation de position lissée avec le filtre de moyenne mobile
latitude_filtree = movmean(latitude, fenetre);
longitude_filtree = movmean(longitude, fenetre);



figure;

subplot( 2,2,1:2 )
plot( longitude_filtree,latitude_filtree, 'b-', 'LineWidth', 1.5);
hold on;
plot(longitude, latitude, 'r.', 'MarkerSize', 10);
xlabel('Latitude');
ylabel('Longitude');
legend('Estimation', 'Mesures GPS');
title('Estimation de la position avec un filtre de moyenne mobile');

    subplot( 223 )
    plot( Release_Flash_xx.GPS_Latitude , 'o' )
    hold on
    plot(latitude_filtree)
    subplot( 224 )
    plot( Release_Flash_xx.GPS_Longitude ,'o')
    hold on
    plot(longitude_filtree)

end




function [Release_Flash_filtred_xx , Information] = Display_float_Kalman( Kalman_Q, Kalman_R, Release , GNAT_Number, IsAJellyfish, Jellyfish_Length, ...
                                                                          Hour_Release, Release_Lat, Release_Lon, ...
                                                                          Hour_Rescue, Rescue_Lat, Rescue_Lon, ...
                                                                          Display_ReleaseNRescue_Point, ...
                                                                          Tendency_Coeff, Tendency_SymbolAngle )

% Extract release info
Release_Number = Release(9:10);
Release_Date   = append( Release(12:13), '/', Release(14:15), "/", Release(16:17));


% Download the LoRa file and the flash file

File = "GNAT_" + GNAT_Number + ".txt" ;
File_Flash = "GNAT_" + GNAT_Number +"_Flash.txt" ;

[Release_xx, Data_LoRa_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File ) ;
[Release_Flash_xx, Data_Flash_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File_Flash ) ;


% Get some info

Information = [ Release_Lat                     Release_Lon             ; 
                Rescue_Lat                      Rescue_Lon              ; 
                Display_ReleaseNRescue_Point    0                       ;
                IsAJellyfish                    Jellyfish_Length        ;
                Tendency_Coeff                  Tendency_SymbolAngle    ] ;

if( IsAJellyfish == true )
    ColorPlot = "red" ;
else
    ColorPlot = "white" ;
end

Release_Flash_filtred_xx = 0 ;


% Kalman

% Paramètres du filtre de Kalman
Q = Kalman_Q;  % Matrice de covariance du bruit du modèle (process noise)
R = Kalman_R ;  % Matrice de covariance du bruit de mesure (measurement noise)
dt = 1/120 ;
% Définition de la matrice de transition A
A = [1 0 dt 0;
     0 1 0 dt;
     0 0 1 0;
     0 0 0 1];

% Initialisation des variables
dt = 1;  % Intervalle de temps entre les mesures
position_init_x = Release_Flash_xx.GPS_Latitude(1) ;
position_init_y = Release_Flash_xx.GPS_Longitude(1) ;
x = [position_init_x; position_init_y; 0; 0];  % État initial [position_x; position_y; vitesse_x; vitesse_y]
P = eye(4);  % Matrice de covariance de l'état initial
H = [1 0 0 0; 0 1 0 0];  % Matrice d'observation (mesure de position)

% Données de mesure de position GPS (latitude et longitude)
latitude = Release_Flash_xx.GPS_Latitude;  
longitude = Release_Flash_xx.GPS_Longitude; 
measurements = [latitude, longitude]';

% Estimation du déplacement avec le filtre de Kalman
estimatedPositions = zeros(2, length(latitude));
for i = 1:length(latitude)
    % Prédiction de l'état
    x = [x(1) + dt * x(3);
         x(2) + dt * x(4);
         x(3);
         x(4)];
     
    % Prédiction de la covariance de l'état
    P = A * P * A' + Q;
    
    % Mise à jour des mesures
    z = measurements(:, i);
    
    % Calcul de l'innovation
    y = z - H * x;
    
    % Calcul de la matrice de covariance de l'innovation
    S = H * P * H' + R;
    
    % Calcul du gain de Kalman
    K = P * H' / S;
    
    % Mise à jour de l'état estimé
    x = x + K * y;
    
    % Mise à jour de la covariance de l'état estimé
    P = (eye(4) - K * H) * P;
    
    % Stockage de l'estimation de la position
    estimatedPositions(:, i) = x(1:2);
end


figure;

subplot( 2,2,1:2 )
plot( estimatedPositions(2, :),estimatedPositions(1, :), 'b-', 'LineWidth', 1.5);
hold on;
plot(longitude, latitude, 'r.', 'MarkerSize', 10);
xlabel('Latitude');
ylabel('Longitude');
legend('Estimation', 'Mesures GPS');
title('Estimation du déplacement avec le filtre de Kalman');

    subplot( 223 )
    plot( Release_Flash_xx.GPS_Latitude , 'o' )
    hold on
    plot(estimatedPositions(1, :))
    subplot( 224 )
    plot( Release_Flash_xx.GPS_Longitude ,'o')
    hold on
    plot(estimatedPositions(2, :))

    % subplot( 221 )
    % if( Data_LoRa_Exist == true )
    %     Display_Trajectory( Release_xx , Information, ColorPlot ) ;
    % else
    %     box on ;
    %     grid on ;
    %     annotation('textbox', [0.3, 0.75, 0, 0], 'String', 'No data available', 'FitBoxToText', 'on', 'HorizontalAlignment', 'center');
    % end
    % title( "1. LoRa Data" ) ;
    % 
    % subplot( 222 )
    % Display_Trajectory( Release_Flash_xx , Information, ColorPlot ) ;
    % title( "2. Flash Data" ) ;
    % 
    % subplot( 223 )
    % Release_Flash_filtred_xx = Filtre_fcnt_vitesse_( Release_Flash_xx ) ;
    % Display_Trajectory( Release_Flash_filtred_xx , Information, ColorPlot )
    % title( "3. Flash Data filtred");
    % 
    % subplot( 224 )
    % Display_Trajectory_Tendency( Release_Flash_filtred_xx , Information , Tendency_Coeff, Tendency_SymbolAngle, ColorPlot )
    % title( "4. Tendancy curve");
    % 
    % if( IsAJellyfish == true )
    %     sgtitle( "Release n°" + Release_Number + " | " + "GNAT #" + GNAT_Number + " | From " + Release_Date + " at " + Hour_Release + " to 10/07/2023 " + Hour_Rescue + " | " + "Jellyfish TL = " + Jellyfish_Length + "cm")
    % else
    %     sgtitle( "Release n°" + Release_Number + " | " + "GNAT #" + GNAT_Number + " | From " + Release_Date + " at " + Hour_Release + " to 10/07/2023 " + Hour_Rescue + " | " + "Float Control")
    % end

end





function [Release_Flash_filtred_xx , Information] = Display_float( Release , GNAT_Number, IsAJellyfish, Jellyfish_Length, ...
                                                                          Hour_Release, Release_Lat, Release_Lon, ...
                                                                          Hour_Rescue, Rescue_Lat, Rescue_Lon, ...
                                                                          Display_ReleaseNRescue_Point, ...
                                                                          Tendency_Coeff, Tendency_SymbolAngle )

% Extract release info
Release_Number = Release(9:10);
Release_Date   = append( Release(12:13), '/', Release(14:15), "/", Release(16:17));


% Download the LoRa file and the flash file

File = "GNAT_" + GNAT_Number + ".txt" ;
File_Flash = "GNAT_" + GNAT_Number +"_Flash.txt" ;

[Release_xx, Data_LoRa_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File ) ;
[Release_Flash_xx, Data_Flash_Exist] = Convert_File_To_Data_Table( "Files_txt_Releases\" + Release + "\" + File_Flash ) ;


% Get some info

Information = [ Release_Lat                     Release_Lon             ; 
                Rescue_Lat                      Rescue_Lon              ; 
                Display_ReleaseNRescue_Point    0                       ;
                IsAJellyfish                    Jellyfish_Length        ;
                Tendency_Coeff                  Tendency_SymbolAngle    ] ;

if( IsAJellyfish == true )
    ColorPlot = "red" ;
else
    ColorPlot = "white" ;
end


figure

    subplot( 221 )
    if( Data_LoRa_Exist == true )
        Display_Trajectory( Release_xx , Information, ColorPlot ) ;
    else
        box on ;
        grid on ;
        annotation('textbox', [0.3, 0.75, 0, 0], 'String', 'No data available', 'FitBoxToText', 'on', 'HorizontalAlignment', 'center');
    end
    title( "1. LoRa Data" ) ;
    
    subplot( 222 )
    Display_Trajectory( Release_Flash_xx , Information, ColorPlot ) ;
    title( "2. Flash Data" ) ;

    subplot( 223 )
    Release_Flash_filtred_xx = Filtre_fcnt_vitesse_( Release_Flash_xx ) ;
    Display_Trajectory( Release_Flash_filtred_xx , Information, ColorPlot )
    title( "3. Data filtred");

    subplot( 224 )
    Display_Trajectory_Tendency( Release_Flash_filtred_xx , Information , Tendency_Coeff, Tendency_SymbolAngle, ColorPlot )
    title( "4. Tendancy curve");

    if( IsAJellyfish == true )
        sgtitle( "Release n°" + Release_Number + " | " + "GNAT #" + GNAT_Number + " | From " + Release_Date + " at " + Hour_Release + " to 10/07/2023 " + Hour_Rescue + " | " + "Jellyfish TL = " + Jellyfish_Length + "cm")
    else
        sgtitle( "Release n°" + Release_Number + " | " + "GNAT #" + GNAT_Number + " | From " + Release_Date + " at " + Hour_Release + " to 10/07/2023 " + Hour_Rescue + " | " + "Float Control")
    end

end













%%

function [ Data_Table_Filtred ] = Filtre_fcnt_vitesse_( Data_Table )

    Data_Table_Filtred = [];

    for i = 2 : 1 : height( Data_Table ) - 1
    
        if( Data_Table.GPS_Vitesse(i) < 0.5 )                                 % Si la vitesse n'est pas abérante 
        Data_Table_Filtred = [Data_Table_Filtred ; Data_Table(i,:)] ;           % ... Alors on garde le point
        else       
            % fprintf("i : %d \t Vitesse : %.4f\n", i, Data_Table.GPS_Vitesse(i) );
            % Si la vitesse est abérante
            B2 = Data_Table.GPS_Latitude(i-1);
            C2 = Data_Table.GPS_Longitude(i-1);
            B3 = Data_Table.GPS_Latitude(i+1);
            C3 = Data_Table.GPS_Longitude(i+1);
            Data_Table.GPS_Distance(i+1) = acos(sin(deg2rad(B2))*sin(deg2rad(B3)) + cos(deg2rad(B2))*cos(deg2rad(B3))*cos(deg2rad(C2-C3))) * 6371000;
            Time = Data_Table.Time_Elapsed(i+1) + Data_Table.Time_Elapsed(i);
            Data_Table.GPS_Vitesse(i+1) = Data_Table.GPS_Distance(i+1) / Time ;
            % pause(0.1);
        end

    end

end



function [ Data_Table_Filtred ] = Filtre_fcnt_vitesse3( Data_Table )

    Data_Table_Filtred = [];

    for i = 1 : 1 : height( Data_Table )
    
        if( Data_Table.GPS_Vitesse(i) < 0.5 )                                 % Si la vitesse n'est pas abérante 
        Data_Table_Filtred = [Data_Table_Filtred ; Data_Table(i,:)] ;           % ... Alors on garde le point
        else       
            % fprintf("i : %d \t Vitesse : %.4f\n", i, Data_Table.GPS_Vitesse(i) );
            % Si la vitesse est abérante
            B2 = Data_Table.GPS_Latitude(i-1);
            C2 = Data_Table.GPS_Longitude(i-1);
            B3 = Data_Table.GPS_Latitude(i+1);
            C3 = Data_Table.GPS_Longitude(i+1);
            Data_Table.GPS_Distance(i+1) = acos(sin(deg2rad(B2))*sin(deg2rad(B3)) + cos(deg2rad(B2))*cos(deg2rad(B3))*cos(deg2rad(C2-C3))) * 6371000;
            Time = Data_Table.Time_Elapsed(i+1) + Data_Table.Time_Elapsed(i);
            Data_Table.GPS_Vitesse(i+1) = Data_Table.GPS_Distance(i+1) / Time ;
            % pause(0.1);
        end


    end

    figure,
    subplot( 121 )
    Display_Trajectory_24h( Data_Table )
    title( "Sans filtre")
    subplot( 122)
    Display_Trajectory_24h( Data_Table_Filtred )
    title( "Avec filtre (Vitesse <= 0.5m/s)")

end




function [] = Display_Trajectory_24h_Jellyfish_And_Dummy( Data_Table_Jellyfish , Data_Table_Dummy )

    % Jellyfish
    Display_Trajectory_24h( Data_Table_Jellyfish ) ;

    x_jellyfish = Data_Table_Jellyfish.GPS_Longitude ;
    y_jellyfish = Data_Table_Jellyfish.GPS_Latitude ;
    
    x_jellyfish_smooth = smooth( x_jellyfish , 'rlowess' );
    y_jellyfish_smooth = smooth( y_jellyfish , 'rlowess');
    
    geoplot( y_jellyfish_smooth, x_jellyfish_smooth , 'r',linewidth=2 )

    % Dummy
    Display_Trajectory_24h( Data_Table_Dummy ) ;

    x_dummy = Data_Table_Dummy.GPS_Longitude ;
    y_dummy = Data_Table_Dummy.GPS_Latitude ;
    
    x_dummy_smooth = smooth( x_dummy , 'rlowess' );
    y_dummy_smooth = smooth( y_dummy , 'rlowess');
    
    geoplot( y_dummy_smooth, x_dummy_smooth , 'b',linewidth=2 )

end

function [] = Display_Trajectory_Tendency_v2( Data_Table_Jellyfish , Information )

    % Jellyfish
    IsAJellyfish = Information(4,1);
    if( IsAJellyfish == true )
        ColorLine = 'red' ;
    else
        ColorLine = 'white' ;
    end
    Display_Trajectory( Data_Table_Jellyfish , Information, ColorLine ) ;

    x_jellyfish = Data_Table_Jellyfish.GPS_Longitude ;
    y_jellyfish = Data_Table_Jellyfish.GPS_Latitude ;

    Value = Information(5,1) ;
    
    x_jellyfish_smooth = smooth( x_jellyfish ,  'rlowess' , Value );
    y_jellyfish_smooth = smooth( y_jellyfish ,  'rlowess' , Value );
    
    geoplot( y_jellyfish_smooth, x_jellyfish_smooth , ColorLine,linewidth=2 )
    hold on

    text(y_jellyfish_smooth(end), x_jellyfish_smooth(end), ">",'Color', ColorLine ,'FontSize',20, 'FontWeight','bold', 'HorizontalAlignment','center', 'Rotation', Information(5,2));

    hold off
end

function [] = Display_Trajectory_Tendency( Data_Table_Jellyfish , GPS_Release_N_Rescue , smooth_factor , Arrow_Rotation_angle, ColorLine )

    % Jellyfish
    Display_Trajectory( Data_Table_Jellyfish , GPS_Release_N_Rescue, ColorLine ) ;

    x_jellyfish = Data_Table_Jellyfish.GPS_Longitude ;
    y_jellyfish = Data_Table_Jellyfish.GPS_Latitude ;

    Value = smooth_factor ;
    
    x_jellyfish_smooth = smooth( x_jellyfish ,  'rlowess' , Value );
    y_jellyfish_smooth = smooth( y_jellyfish ,  'rlowess' , Value );
    
    geoplot( y_jellyfish_smooth, x_jellyfish_smooth , ColorLine,linewidth=2 )
    hold on

    text(y_jellyfish_smooth(end), x_jellyfish_smooth(end), ">",'Color', ColorLine ,'FontSize',20, 'FontWeight','bold', 'HorizontalAlignment','center', 'Rotation', Arrow_Rotation_angle);

    hold off
end


function [] = Display_Trajectory_24h_Jellyfish( Data_Table_Jellyfish  )

    % Jellyfish
    Display_Trajectory_24h( Data_Table_Jellyfish ) ;

    x_jellyfish = Data_Table_Jellyfish.GPS_Longitude ;
    y_jellyfish = Data_Table_Jellyfish.GPS_Latitude ;

    Value = 0.025;
    
    x_jellyfish_smooth = smooth( x_jellyfish ,  'rlowess' );
    y_jellyfish_smooth = smooth( y_jellyfish ,  'rlowess' );
    
    geoplot( y_jellyfish_smooth, x_jellyfish_smooth , 'r',linewidth=2 )


end


function [] = Display_Trajectory( Data_Table , GPS_Release_N_Rescue, ColorPoint )

    Color = linspace(1, 10, height(Data_Table));
    cmap = colormap;  % Obtenir la colormap par défaut
    rgb_values = interp1(linspace(1, 10, size(cmap, 1)), cmap, Color);  % Interpolation des valeurs RVB

    for i = 1 : 1 : height(Data_Table) 
        plot = geoscatter( Data_Table.GPS_Latitude(i), Data_Table.GPS_Longitude(i), 30, rgb_values(i, :) , 'filled') ; 
        row = [ dataTipTextRow( "Float" , Data_Table.Board_Name(i) ), ...
                dataTipTextRow( "fcnt" , Data_Table.LoRa_fcnt(i) ), ...
                dataTipTextRow( "Date" , Data_Table.Time_User(i) ) ];
        plot.DataTipTemplate.DataTipRows(end+1:end+3) = row ;
        hold on
    end

    hold on

    if( GPS_Release_N_Rescue(3,1) == true )
        geoscatter(GPS_Release_N_Rescue(1,1), GPS_Release_N_Rescue(1,2), "square", ColorPoint, 'filled');
        geoscatter(GPS_Release_N_Rescue(2,1), GPS_Release_N_Rescue(2,2), "hexagram", ColorPoint, 'filled');
    end

end


function [Nb_Gateways_EqualTo_1,Nb_Gateways_EqualTo_2,Nb_Gateways_EqualAndOver_3] = Display_Trajectory_24h( Data_Table )

    LoRa_fcnt_Start = Data_Table.LoRa_fcnt( 1 ) ;
    LoRa_fcnt_End   = Data_Table.LoRa_fcnt( height(Data_Table) );

    Nb_fcnt = LoRa_fcnt_End - LoRa_fcnt_Start ;

    %Color = linspace(1,10,height(Data_Table)) / 10

    Color = linspace(1, 10, height(Data_Table));
    cmap = colormap;  % Obtenir la colormap par défaut
    rgb_values = interp1(linspace(1, 10, size(cmap, 1)), cmap, Color);  % Interpolation des valeurs RVB

    size( Color );
    height(Data_Table) ;

    Nb_Gateways_EqualTo_1 = 0 ;
    Nb_Gateways_EqualTo_2 = 0 ;
    Nb_Gateways_EqualAndOver_3 = 0 ;

    for i = 1 : 1 : height(Data_Table) 
        plot = geoscatter( Data_Table.GPS_Latitude(i), Data_Table.GPS_Longitude(i), 'MarkerEdgeColor', rgb_values(i, :)) ; % Color red
        row = dataTipTextRow( "fcnt" , Data_Table.LoRa_fcnt(i) );
        plot.DataTipTemplate.DataTipRows(end+1) = row ;
        hold on
    end
    % geolimits([43.0146 43.1531],[2.9289 3.1185]);

    % fprintf( "Nb Gateways equal to 1 : %d \n", Nb_Gateways_EqualTo_1 ) ;
    % fprintf( "Nb Gateways equal to 2 : %d \n", Nb_Gateways_EqualTo_2 ) ;
    % fprintf( "Nb Gateways equal and over to 3 : %d \n", Nb_Gateways_EqualAndOver_3 ) ;

end


function [] = Display_LoRa()

    figure("Name","Number of LoRa gateways detected by the message "), 
    geoscatter( 0,0,MarkerEdgeColor='#D95319') ; hold on
    geoscatter( 0,0,MarkerEdgeColor='#EDB120') ; hold on
    geoscatter( 0,0,MarkerEdgeColor='#77AC30') ; hold on

    Nb_Gateways_EqualTo_1 = 0 ;
    Nb_Gateways_EqualTo_2 = 0 ;
    Nb_Gateways_EqualAndOver_3 = 0 ;
    Nb_Messages = 0 ;

    % fprintf( " GNAT_xx.txt \t\t|\t 01 \t\t 02 \t\t 03 \t\t 04 \t\t 05 \t\t 06 \t\t 07 \t\t 08 \t\t 09 \t\t 10 \n");
    
    % Get info about 'Files_txt' folder
    Files_txt_Infos = dir( 'Files_txt' ) ;
    
    % In every SubFolder ...
    for Number_Of_SubFolder = 3:1:height(Files_txt_Infos)
    
        Files_Number = zeros( 1, 10 ) ; % Set or reset variable
    
        % ... Get the name of the SubFolder, 
        SubFolder_Name = Files_txt_Infos(Number_Of_SubFolder).name ;
        % fprintf( " %s \t|\t " , SubFolder_Name ) ;
        % ... and get info about the content of the SubFolder,
        Files_txt_Release_xx_DDMMYY = dir( strcat('Files_txt/',SubFolder_Name) ) ;
    
        % ... then get the content of the SubFolder ...
        for Number_Of_SubsubFolder = 3:1:height(Files_txt_Release_xx_DDMMYY)
    
            % ... Get the name of the file .txt
            SubsubFolder_Name = Files_txt_Release_xx_DDMMYY(Number_Of_SubsubFolder).name ;
            % .... Find the number the name
            GNAT_xx_String = regexp(SubsubFolder_Name,'\d+','match'); 
            % ... Convert the string to an int
            GNAT_xx_Number = str2double(GNAT_xx_String); 

            % Calculate the Lost LoRa msg
            Data_Table_Name = append(SubFolder_Name, '_' , SubsubFolder_Name);
            Data_Table_Name = Data_Table_Name(1:24) ;
            % string = 'Release_02_260523_GNAT_0' ;
            var_name = sprintf('%s%d',Data_Table_Name, GNAT_xx_Number) ; % Construire le nom de la variable
            array = evalin( 'base' , var_name);          % Obtenir le tableau correspondant à la variable

            % Display a map that show network quality in terms of GPS position.
            [Nb_Gateways_EqualTo_1_fcnt,Nb_Gateways_EqualTo_2_fcnt,Nb_Gateways_EqualAndOver_3_fcnt] = Display_LoRa_Gateways_Data( array ) ;
            Nb_Gateways_EqualTo_1 = Nb_Gateways_EqualTo_1 + Nb_Gateways_EqualTo_1_fcnt ;
            Nb_Gateways_EqualTo_2 = Nb_Gateways_EqualTo_2 + Nb_Gateways_EqualTo_2_fcnt ;
            Nb_Gateways_EqualAndOver_3 = Nb_Gateways_EqualAndOver_3 + Nb_Gateways_EqualAndOver_3_fcnt ;

        end
    
    end

    legend("Equal or over to 3", "Equal to 2", "Equal to 1")

    fprintf( "Nb Gateways equal to 1 : %d \n", Nb_Gateways_EqualTo_1 ) ;
    fprintf( "Nb Gateways equal to 2 : %d \n", Nb_Gateways_EqualTo_2 ) ;
    fprintf( "Nb Gateways equal and over to 3 : %d \n", Nb_Gateways_EqualAndOver_3 ) ;

end

function [] = Get_Nb_Data() 

   fprintf( " Nombre de donnée totale \n");
   Nb_Data = 0 ;

    % Get info about 'Files_txt' folder
    Files_txt_Infos = dir( 'Files_txt' ) ;
    
    % In every SubFolder ...
    for Number_Of_SubFolder = 3:1:height(Files_txt_Infos)
    
        Files_Number = zeros( 1, 10 ) ; % Set or reset variable
    
        % ... Get the name of the SubFolder, 
        SubFolder_Name = Files_txt_Infos(Number_Of_SubFolder).name ;
        % fprintf( " %s \t|\t " , SubFolder_Name ) ;
        % ... and get info about the content of the SubFolder,
        Files_txt_Release_xx_DDMMYY = dir( strcat('Files_txt/',SubFolder_Name) ) ;

        % ... Track of the number of message during the release
        Nb_Data_Release = 0 ;
    
        % ... then get the content of the SubFolder ...
        for Number_Of_SubsubFolder = 3:1:height(Files_txt_Release_xx_DDMMYY)
    
            % ... Get the name of the file .txt
            SubsubFolder_Name = Files_txt_Release_xx_DDMMYY(Number_Of_SubsubFolder).name ;
            % .... Find the number the name
            GNAT_xx_String = regexp(SubsubFolder_Name,'\d+','match'); 
            % ... Convert the string to an int
            GNAT_xx_Number = str2double(GNAT_xx_String); 


            File_Name = append( SubFolder_Name , '_', SubsubFolder_Name ) ;
            File_Name = File_Name(1:(strlength(File_Name)-4));
            fprintf( " %s \t| \t" , File_Name  ) ;

            % Calculate the Lost LoRa msg
            Data_Table_Name = append(SubFolder_Name, '_' , SubsubFolder_Name);
            Data_Table_Name = Data_Table_Name(1:24) ;
            var_name = sprintf('%s%d',Data_Table_Name, GNAT_xx_Number) ; % Construire le nom de la variable
            array = evalin( 'base' , var_name);          % Obtenir le tableau correspondant à la variable

            
            fprintf( " Number of message : %d \n", height(array) ) ; %

            Nb_Data_Release = Nb_Data_Release + height(array) ; % Track number of message during the release
            
            Nb_Data = Nb_Data + height( array ) ; % Track number of message total
    
        end
    
        fprintf(" %s \t\t\t| \t Number of message : %d \n", SubFolder_Name, Nb_Data_Release );
        fprintf("\n");
    
    end

    fprintf( " Total messages : %d \n", Nb_Data );

end

function [] = Display_Data_Infos()

    fprintf( " Fichier .txt \t\t\t\t|\t Nombre de message envoyé \t\t Nb de msg reçu \t\t Pourcentage \t\t Nb de gateways moyen \t\t Nb. de satellite moyen \t\t EHPE Moyen \n");

    % Get info about 'Files_txt' folder
    Files_txt_Infos = dir( 'Files_txt' ) ;
    
    % In every SubFolder ...
    for Number_Of_SubFolder = 3:1:height(Files_txt_Infos)
    
        Files_Number = zeros( 1, 10 ) ; % Set or reset variable
    
        % ... Get the name of the SubFolder, 
        SubFolder_Name = Files_txt_Infos(Number_Of_SubFolder).name ;
        % fprintf( " %s \t|\t " , SubFolder_Name ) ;
        % ... and get info about the content of the SubFolder,
        Files_txt_Release_xx_DDMMYY = dir( strcat('Files_txt/',SubFolder_Name) ) ;
    
        % ... then get the content of the SubFolder ...
        for Number_Of_SubsubFolder = 3:1:height(Files_txt_Release_xx_DDMMYY)
    
            % ... Get the name of the file .txt
            SubsubFolder_Name = Files_txt_Release_xx_DDMMYY(Number_Of_SubsubFolder).name ;
            % .... Find the number the name
            GNAT_xx_String = regexp(SubsubFolder_Name,'\d+','match'); 
            % ... Convert the string to an int
            GNAT_xx_Number = str2double(GNAT_xx_String); 


            File_Name = append( SubFolder_Name , '_', SubsubFolder_Name ) ;
            File_Name = File_Name(1:(strlength(File_Name)-4));
            fprintf( " %s \t| \t" , File_Name  ) ;

            % Calculate the Lost LoRa msg
            Data_Table_Name = append(SubFolder_Name, '_' , SubsubFolder_Name);
            Data_Table_Name = Data_Table_Name(1:24) ;
            var_name = sprintf('%s%d',Data_Table_Name, GNAT_xx_Number) ; % Construire le nom de la variable
            array = evalin( 'base' , var_name);          % Obtenir le tableau correspondant à la variable

            LoRa_fcnt = table2array(array(:, 'LoRa_fcnt'));  % Extraire la colonne 'LoRa_fcnt' comme tableau
            first_value = LoRa_fcnt(1) ;                     % Récupérer la première valeur

            First_Msg = LoRa_fcnt(1) ;
            Last_Msg  = LoRa_fcnt(height(LoRa_fcnt)) ;
            Nb_Msg    = height(LoRa_fcnt) ;
            Msg_Theoretically_Received = Last_Msg - First_Msg + 1 ;

            Msg_Lost = Nb_Msg / Msg_Theoretically_Received ;
            Msg_Lost_Percent = round( Msg_Lost * 100 , 1 ) ;

            % Calcul du nombre de gateways moyen
            LoRa_Gateways = table2array(array(:, 'LoRa_Nb_Gateways')) ;
            LoRa_Gateways_Mean = mean( LoRa_Gateways ) ;

            % Calcul du nombre de satellite moyen
            GPS_Nb_Satellites = table2array(array(:, 'GPS_NbSatellites')) ;
            GPS_Nb_Satellites_Mean = mean( GPS_Nb_Satellites ) ;

            % Calcul du EHPE moyen
            GPS_EHPE = table2array(array(:, 'GPS_EHPE')) ;
            GPS_EHPE_Mean = mean( GPS_EHPE ) ;

            % Affichage des resultats
            fprintf('%d \t', Nb_Msg) ;
            fprintf('%d \t', Msg_Theoretically_Received) ;
            fprintf('%.1f %% \t', Msg_Lost_Percent) ;
            fprintf('%.1f \t', LoRa_Gateways_Mean ) ;
            fprintf('%.1f \t', GPS_Nb_Satellites_Mean ) ;
            fprintf('%.1f \n', GPS_EHPE_Mean ) ;


            % ... Set value to one (presence indicator)
            % Files_Number(1,GNAT_xx_Number) = Msg_Lost_Percent ;

    
        end
    
        % % Display results of wich file are present (1) or not (0)
        % fprintf( '%.1f\t\t ',Files_Number ); 
        fprintf("\n");
    
    end

end


function [] = Display_Lost_LoRa_Data()

    fprintf( " GNAT_xx.txt \t\t|\t 01 \t\t 02 \t\t 03 \t\t 04 \t\t 05 \t\t 06 \t\t 07 \t\t 08 \t\t 09 \t\t 10 \n");
    
    % Get info about 'Files_txt' folder
    Files_txt_Infos = dir( 'Files_txt' ) ;
    
    % In every SubFolder ...
    for Number_Of_SubFolder = 3:1:height(Files_txt_Infos)
    
        Files_Number = zeros( 1, 10 ) ; % Set or reset variable
    
        % ... Get the name of the SubFolder, 
        SubFolder_Name = Files_txt_Infos(Number_Of_SubFolder).name ;
        fprintf( " %s \t|\t " , SubFolder_Name ) ;
        % ... and get info about the content of the SubFolder,
        Files_txt_Release_xx_DDMMYY = dir( strcat('Files_txt/',SubFolder_Name) ) ;
    
        % ... then get the content of the SubFolder ...
        for Number_Of_SubsubFolder = 3:1:height(Files_txt_Release_xx_DDMMYY)
    
            % ... Get the name of the file .txt
            SubsubFolder_Name = Files_txt_Release_xx_DDMMYY(Number_Of_SubsubFolder).name ;
            % .... Find the number the name
            GNAT_xx_String = regexp(SubsubFolder_Name,'\d+','match'); 
            % ... Convert the string to an int
            GNAT_xx_Number = str2double(GNAT_xx_String); 

            % Calculate the Lost LoRa msg
            Data_Table_Name = append(SubFolder_Name, '_' , SubsubFolder_Name);
            Data_Table_Name = Data_Table_Name(1:24) ;
            % string = 'Release_02_260523_GNAT_0' ;
            var_name = sprintf('%s%d',Data_Table_Name, GNAT_xx_Number) ; % Construire le nom de la variable
            array = evalin( 'base' , var_name);          % Obtenir le tableau correspondant à la variable
        
            LoRa_fcnt = table2array(array(:, 'LoRa_fcnt'));  % Extraire la colonne 'LoRa_fcnt' comme tableau
            first_value = LoRa_fcnt(1) ;                     % Récupérer la première valeur
        
            First_Msg = LoRa_fcnt(1) ;
            Last_Msg  = LoRa_fcnt(height(LoRa_fcnt)) ;
            Nb_Msg    = height(LoRa_fcnt) ;
            Msg_Theoretically_Received = Last_Msg - First_Msg + 1 ;
        
            Msg_Lost = Nb_Msg / Msg_Theoretically_Received ;
            Msg_Lost_Percent = round( Msg_Lost * 100 , 1 ) ;
        
            % fprintf('Pourcentage Message LoRa %s : %.1f %%\n', var_name, Msg_Lost_Percent);

            % ... Set value to one (presence indicator)
            Files_Number(1,GNAT_xx_Number) = Msg_Lost_Percent ;

    
        end
    
        % Display results of wich file are present (1) or not (0)
        fprintf( '%.1f\t\t ',Files_Number ); fprintf("\n");
    
    end

end

function [] = Display_Downloaded_File()

    fprintf( " GNAT_xx.txt \t\t|\t 01 \t 02 \t 03 \t 04 \t 05 \t 06 \t 07 \t 08 \t 09 \t 10 \n");
    
    % Get info about 'Files_txt' folder
    Files_txt_Infos = dir( 'Files_txt' ) ;
    
    % In every SubFolder ...
    for Number_Of_SubFolder = 3:1:height(Files_txt_Infos)
    
        Files_Number = zeros( 1, 10 ) ; % Set or reset variable
    
        % ... Get the name of the SubFolder, 
        SubFolder_Name = Files_txt_Infos(Number_Of_SubFolder).name ;
        fprintf( " %s \t|\t " , SubFolder_Name ) ;
        % ... and get info about the content of the SubFolder,
        Files_txt_Release_xx_DDMMYY = dir( strcat('Files_txt/',SubFolder_Name) ) ;
    
        % ... then get the content of the SubFolder ...
        for Number_Of_SubsubFolder = 3:1:height(Files_txt_Release_xx_DDMMYY)
    
            % ... Get the name of the file .txt
            SubsubFolder_Name = Files_txt_Release_xx_DDMMYY(Number_Of_SubsubFolder).name ;
            % .... Find the number the name
            GNAT_xx_String = regexp(SubsubFolder_Name,'\d+','match'); 
            % ... Convert the string into a string
            GNAT_xx_Number = str2double(GNAT_xx_String); 
            % ... Set value to one (presence indicator)
            Files_Number(1,GNAT_xx_Number) = 1 ;
    
        end
    
        % Display results of wich file are present (1) or not (0)
        fprintf( ' %d\t\t ',Files_Number ); fprintf("\n");
    
    end

end


function [ Data_Table_With_Variables_Name, The_File_Exist ] = Convert_File_To_Data_Table( Path_Of_The_File )

    if exist( Path_Of_The_File, 'file' ) == 2
        The_File_Exist = true ;
        Data_Table_Without_Variables_Name = readtable( Path_Of_The_File );
        Data_Table_With_Variables_Name = Set_Variables_Names_To_Data_Table( Data_Table_Without_Variables_Name );
    else
        The_File_Exist = false ;
        Data_Table_With_Variables_Name = 0 ;
        %error("The file doesn't exist");
    end

end


function [ Data_Table_With_Variables_Name ] = Set_Variables_Names_To_Data_Table( Data_Table_Without_Variables_Name )

    if( width(Data_Table_Without_Variables_Name)== 31 )
        Default_Variables_Names = [ "Var1" ,"Var2" ,"Var3" ,"Var4" ,"Var5" ,"Var6" ,"Var7" ,"Var8" ,"Var9" ,"Var10", ...
                                    "Var11","Var12","Var13","Var14","Var15","Var16","Var17","Var18","Var19","Var20", ...
                                    "Var21","Var22","Var23","Var24","Var25","Var26","Var27","Var28","Var29","Var30", ...
                                    "Var31" ] ;
    
        Custom_Varialbes_Names = [ "Board_Name", "Battery_Level", "Time_User", "Time_PreviousMsg", "Time_Elapsed", "time", "STM32_Temperature", ...
                                   "LoRa_DevEUI", "LoRa_Network_Quality", "LoRa_RSSI", "LoRa_SNR", "LoRa_ESP", "LoRa_SF", "LoRa_Frequency", "LoRa_Nb_Gateways", "LoRa_fcnt", "LoRa_Payload", ...
                                   "GPS_Latitude", "GPS_Longitude", "GPS_NbSatellites", "GPS_EHPE", "GPS_Distance", "GPS_Vitesse", "GPS_Direction", ...
                                   "Acc_Temp", "Acc_AxeX", "Acc_AxeY", "Acc_AxeZ", "Acc_Roll", "Acc_Pitch", "Acc_Yaw"] ;
        
        Data_Table_With_Variables_Name = renamevars( Data_Table_Without_Variables_Name , ...
                                                     Default_Variables_Names, ...
                                                     Custom_Varialbes_Names );
    end
    if( width(Data_Table_Without_Variables_Name)== 33 )
        Default_Variables_Names = [ "Var1" ,"Var2" ,"Var3" ,"Var4" ,"Var5" ,"Var6" ,"Var7" ,"Var8" ,"Var9" ,"Var10", ...
                                    "Var11","Var12","Var13","Var14","Var15","Var16","Var17","Var18","Var19","Var20", ...
                                    "Var21","Var22","Var23","Var24","Var25","Var26","Var27","Var28","Var29","Var30", ...
                                    "Var31", "Var32", "Var33" ] ;
    
        Custom_Varialbes_Names = [ "Board_Name", "Battery_Level", "Time_User", "Time_PreviousMsg", "Time_Elapsed", "time", "STM32_Temperature", ...
                                   "LoRa_DevEUI", "LoRa_Network_Quality", "LoRa_RSSI", "LoRa_SNR", "LoRa_ESP", "LoRa_SF", "LoRa_Frequency", "LoRa_Nb_Gateways", "LoRa_fcnt", "LoRa_Payload", ...
                                   "GPS_Latitude", "GPS_Longitude", "GPS_NbSatellites", "GPS_EHPE", "GPS_Distance", "GPS_Vitesse", "GPS_Direction", ...
                                   "Acc_Temp", "Acc_AxeX", "Acc_AxeY", "Acc_AxeZ", "Acc_Roll", "Acc_Pitch", "Acc_Yaw", ...
                                   "LoRa_Busy", "LoRa_Join"] ;
        
        Data_Table_With_Variables_Name = renamevars( Data_Table_Without_Variables_Name , ...
                                                     Default_Variables_Names, ...
                                                     Custom_Varialbes_Names );
    end
end


function [ Data_Table_With_Variables_Name ] = Set_Variables_Names_To_Data_Table2( Data_Table_Without_Variables_Name )

        Default_Variables_Names = [ "Var1" ,"Var2" ,"Var3" ,"Var4" ,"Var5" ,"Var6" ,"Var7" ,"Var8" ,"Var9" ,"Var10", ...
                                    "Var11","Var12","Var13","Var14","Var15","Var16","Var17","Var18","Var19","Var20", ...
                                    "Var21","Var22","Var23","Var24","Var25","Var26","Var27","Var28","Var29","Var30", ...
                                    "Var31" ] ;
    
        Custom_Varialbes_Names = [ "Board_Name", "Battery_Level", "Time_User", "Time_PreviousMsg", "Time_Elapsed", "time", "STM32_Temperature", ...
                                   "LoRa_DevEUI", "LoRa_Network_Quality", "LoRa_RSSI", "LoRa_SNR", "LoRa_ESP", "LoRa_SF", "LoRa_Frequency", "LoRa_Nb_Gateways", "LoRa_fcnt", "LoRa_Payload", ...
                                   "GPS_Latitude", "GPS_Longitude", "GPS_NbSatellites", "GPS_EHPE", "GPS_Distance", "GPS_Vitesse", "GPS_Direction", ...
                                   "Acc_Temp", "Acc_AxeX", "Acc_AxeY", "Acc_AxeZ", "Acc_Roll", "Acc_Pitch", "Acc_Yaw"] ;
        
        Data_Table_With_Variables_Name = renamevars( Data_Table_Without_Variables_Name , ...
                                                     Default_Variables_Names, ...
                                                     Custom_Varialbes_Names );

end


function [Nb_Gateways_EqualTo_1,Nb_Gateways_EqualTo_2,Nb_Gateways_EqualAndOver_3] = Display_LoRa_Gateways_Data( Data_Table )

    Nb_Gateways_EqualTo_1 = 0 ;
    Nb_Gateways_EqualTo_2 = 0 ;
    Nb_Gateways_EqualAndOver_3 = 0 ;

    for i = 1 : 1 : height(Data_Table) 
        if( Data_Table.LoRa_Nb_Gateways(i)==1 )
            Nb_Gateways_EqualTo_1 = Nb_Gateways_EqualTo_1 + 1 ;
            geoscatter( Data_Table.GPS_Latitude(i), Data_Table.GPS_Longitude(i), MarkerEdgeColor='#D95319' ) % Color red
        end
        if( Data_Table.LoRa_Nb_Gateways(i)==2 )
            Nb_Gateways_EqualTo_2 = Nb_Gateways_EqualTo_2 + 1 ;
            geoscatter( Data_Table.GPS_Latitude(i), Data_Table.GPS_Longitude(i), MarkerEdgeColor='#EDB120' ) % Color yellow
        end
        if( Data_Table.LoRa_Nb_Gateways(i)>=3 )
            Nb_Gateways_EqualAndOver_3 = Nb_Gateways_EqualAndOver_3 + 1 ;
            geoscatter( Data_Table.GPS_Latitude(i), Data_Table.GPS_Longitude(i), MarkerEdgeColor='#77AC30' ) % Color green
        end
        hold on
    end
    geolimits([43.0146 43.1531],[2.9289 3.1185])

    % fprintf( "Nb Gateways equal to 1 : %d \n", Nb_Gateways_EqualTo_1 ) ;
    % fprintf( "Nb Gateways equal to 2 : %d \n", Nb_Gateways_EqualTo_2 ) ;
    % fprintf( "Nb Gateways equal and over to 3 : %d \n", Nb_Gateways_EqualAndOver_3 ) ;

end









